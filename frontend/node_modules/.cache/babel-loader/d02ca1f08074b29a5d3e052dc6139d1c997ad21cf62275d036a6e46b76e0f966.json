{"ast":null,"code":"var _jsxFileName = \"D:\\\\cattle-disease-detection\\\\frontend\\\\src\\\\pages\\\\UploadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n// import \"./Upload.css\"; // Custom CSS for styling the component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadPage = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [imagePreview, setImagePreview] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle file input change\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        setImagePreview(e.target.result);\n      };\n      reader.readAsDataURL(file);\n      setSelectedFile(file);\n      setResult(null);\n      setError(null);\n    } else {\n      setImagePreview(null);\n      setSelectedFile(null);\n      setError(\"No file selected.\");\n    }\n  };\n\n  // Handle file upload and prediction\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError(\"Please upload an image before processing.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"image\", selectedFile);\n    setProcessing(true);\n    setError(null);\n    try {\n      const response = await fetch(\"http://localhost:5001/predict\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setResult(data);\n      } else {\n        throw new Error(\"Failed to process the image.\");\n      }\n    } catch (err) {\n      console.error(\"Error:\", err);\n      setError(\"An error occurred while processing the image.\");\n    } finally {\n      setProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Cattle Disease Detection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"subtitle\",\n      children: \"Upload an image of your cattle to detect possible diseases.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        name: \"image\",\n        accept: \"image/*\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), imagePreview && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imagePreview,\n          alt: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-upload\",\n      onClick: handleUpload,\n      disabled: processing,\n      children: processing ? \"Processing...\" : \"Upload and Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Disease:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 24\n        }, this), \" \", result.disease]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Confidence:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 24\n        }, this), \" \", (result.confidence * 100).toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Remedy:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 24\n        }, this), \" \", result.remedy]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(UploadPage, \"S50v/lUGi5oJITLwxRbwIEX6Zao=\");\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadPage","_s","selectedFile","setSelectedFile","imagePreview","setImagePreview","processing","setProcessing","result","setResult","error","setError","handleFileChange","event","file","target","files","reader","FileReader","onload","e","readAsDataURL","handleUpload","formData","FormData","append","response","fetch","method","body","ok","data","json","Error","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","accept","onChange","src","alt","onClick","disabled","disease","confidence","toFixed","remedy","_c","$RefreshReg$"],"sources":["D:/cattle-disease-detection/frontend/src/pages/UploadPage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n// import \"./Upload.css\"; // Custom CSS for styling the component\r\n\r\nconst UploadPage = () => {\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [imagePreview, setImagePreview] = useState(null);\r\n    const [processing, setProcessing] = useState(false);\r\n    const [result, setResult] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Handle file input change\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                setImagePreview(e.target.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n            setSelectedFile(file);\r\n            setResult(null);\r\n            setError(null);\r\n        } else {\r\n            setImagePreview(null);\r\n            setSelectedFile(null);\r\n            setError(\"No file selected.\");\r\n        }\r\n    };\r\n\r\n    // Handle file upload and prediction\r\n    const handleUpload = async () => {\r\n        if (!selectedFile) {\r\n            setError(\"Please upload an image before processing.\");\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"image\", selectedFile);\r\n\r\n        setProcessing(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5001/predict\", {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setResult(data);\r\n            } else {\r\n                throw new Error(\"Failed to process the image.\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error:\", err);\r\n            setError(\"An error occurred while processing the image.\");\r\n        } finally {\r\n            setProcessing(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"upload-container\">\r\n            <h1 className=\"title\">Cattle Disease Detection</h1>\r\n            <p className=\"subtitle\">Upload an image of your cattle to detect possible diseases.</p>\r\n\r\n            <div className=\"file-upload\">\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"fileInput\"\r\n                    name=\"image\"\r\n                    accept=\"image/*\"\r\n                    onChange={handleFileChange}\r\n                />\r\n                {imagePreview && (\r\n                    <div className=\"image-preview\">\r\n                        <img src={imagePreview} alt=\"Preview\" />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <button\r\n                className=\"btn-upload\"\r\n                onClick={handleUpload}\r\n                disabled={processing}\r\n            >\r\n                {processing ? \"Processing...\" : \"Upload and Predict\"}\r\n            </button>\r\n\r\n            {result && (\r\n                <div className=\"result-box\">\r\n                    <h3>Prediction Result:</h3>\r\n                    <p><strong>Disease:</strong> {result.disease}</p>\r\n                    <p><strong>Confidence:</strong> {(result.confidence * 100).toFixed(2)}%</p>\r\n                    <p><strong>Remedy:</strong> {result.remedy}</p>\r\n                </div>\r\n            )}\r\n\r\n            {error && <p className=\"error\">{error}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}